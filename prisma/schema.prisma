generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Better Auth core models with additional fields + Admin fields
model User {
  id               String    @id @default(cuid())
  name             String
  email            String    @unique
  emailVerified    Boolean   @default(false)
  image            String?
  username         String    @unique
  displayUsername  String    @unique
  dateOfBirth      DateTime?
  gender           Gender?
  phoneNumber      String?
  address          String?   @db.Text
  state            String?
  lga              String?
  schoolName       String?
  twoFactorEnabled Boolean   @default(false)

  // Admin plugin fields
  role       String?   @default("user")
  banned     Boolean   @default(false)
  banReason  String?   @db.Text
  banExpires DateTime?

  // Admin user creation tracking fields
  passwordChangeRequired Boolean @default(false)
  createdBy              String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions  Session[]
  accounts  Account[]
  twoFactor TwoFactor?

  @@index([email])
  @@index([username])
  @@index([displayUsername])
  @@index([role])
  @@index([banned])
  @@index([passwordChangeRequired])
  @@index([createdBy])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?  @db.Text
  userId    String

  // Admin plugin field for impersonation
  impersonatedBy String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([impersonatedBy])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@unique([identifier, value(length: 255)])
  @@index([value(length: 255)])
  @@map("verification")
}

model TwoFactor {
  id          String  @id @default(cuid())
  secret      String? @db.Text
  backupCodes String? @db.Text
  userId      String  @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("twoFactor")
}

model KeyValueStore {
  key       String    @id
  value     String    @db.Text
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([expiresAt])
  @@map("key_value_store")
}


model Subject {
  id          String    @id @default(cuid())
  name        String    @unique
  code        String?   @unique @map("code") // Optional short code (e.g., "MATH", "ENG")
  description String?   @db.Text
  isActive    Boolean   @default(true) @map("is_active")
  
  // Audit fields
  createdBy   String    @map("created_by")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at") // Soft delete
  
  // Relations
  questions   Question[]
  exams       Exam[]
  
  // Indexes for performance
  @@index([name])
  @@index([code])
  @@index([isActive])
  @@index([deletedAt])
  @@index([createdBy])
  @@map("subjects")
}

// ============================================
// QUESTION BANK MODELS (VALUES ENCRYPTED, NAMES UNCHANGED)
// ============================================

model Question {
  id           String @id @default(cuid())
  examType     String @map("exam_type")
  year         Int
  
  subjectId    String?  @map("subject_id")
  subject      Subject? @relation(fields: [subjectId], references: [id], onDelete: Restrict)
  
  questionType String @map("question_type") // multiple_choice, true_false, essay, fill_in_blank

  // Encrypted value stored as JSON: { ciphertext, iv, tag, salt }
  questionText String @map("question_text") @db.Text

  questionImage String? @map("question_image")
  questionPoint Float   @map("question_point")

  // Encrypted value stored as JSON: { ciphertext, iv, tag, salt } (nullable)
  answerExplanation String? @map("answer_explanation") @db.Text

  difficultyLevel String @map("difficulty_level") // easy, medium, hard
  tags            Json // Array of strings for search/filtering
  timeLimit       Int?   @map("time_limit") // In seconds
  language        String @default("en")

  // Audit fields
  createdBy String    @map("created_by") // Admin/exam_manager user ID
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") // Soft delete

  // Relations
  options QuestionOption[]
  exams   ExamQuestion[]

  // Indexes for performance
  @@index([examType, year, subjectId]) 
  @@index([subjectId]) 
  @@index([questionType])
  @@index([difficultyLevel])
  @@index([createdBy])
  @@index([deletedAt])
  @@map("questions")
}

model QuestionOption {
  id         String @id @default(cuid())
  questionId String @map("question_id")

  // Encrypted value stored as JSON: { ciphertext, iv, tag, salt }
  optionText String @map("option_text") @db.Text

  optionImage String? @map("option_image")
  isCorrect   Boolean @map("is_correct")
  orderIndex  Int     @map("order_index") // For maintaining option order (A, B, C, D)

  // Relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([questionId])
  @@map("question_options")
}

// ============================================
// EXAM MODELS
// ============================================

model Exam {
  id               String    @id @default(cuid())
  examType         String    @map("exam_type") // WAEC, JAMB, NECO, etc.
  
  subjectId        String?    @map("subject_id")
  subject          Subject?   @relation(fields: [subjectId], references: [id], onDelete: Restrict)
  
  year             Int
  title            String
  description      String?   @db.Text
  duration         Int // In minutes
  passingScore     Float?    @map("passing_score")
  maxAttempts      Int?      @map("max_attempts")
  shuffleQuestions Boolean   @default(false) @map("shuffle_questions")
  randomizeOptions Boolean   @default(false) @map("randomize_options")
  isPublic         Boolean   @default(false) @map("is_public")
  isFree           Boolean   @default(true) @map("is_free")
  status           String    @default("draft") // draft, published, archived
  category         String? // mock, practice, official
  startDate        DateTime? @map("start_date")
  endDate          DateTime? @map("end_date")

  // Audit fields
  createdBy String    @map("created_by") // Admin user ID
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") // Soft delete

  // Relations
  questions ExamQuestion[]

  // Indexes for performance
  @@index([examType, year, subjectId]) 
  @@index([subjectId]) 
  @@index([status])
  @@index([createdBy])
  @@index([deletedAt])
  @@map("exams")
}

// Junction table for exam questions (many-to-many with order)
model ExamQuestion {
  id         String @id @default(cuid())
  examId     String @map("exam_id")
  questionId String @map("question_id")
  orderIndex Int    @map("order_index") // Question order in exam

  // Relations
  exam     Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([examId, questionId]) // Prevent duplicate questions in same exam
  @@index([examId, orderIndex])
  @@index([questionId])
  @@map("exam_questions")
}

enum Gender {
  MALE
  FEMALE
}