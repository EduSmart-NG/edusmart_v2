generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Better Auth core models with additional fields + Admin fields
model User {
  id               String    @id @default(cuid())
  name             String
  email            String    @unique
  emailVerified    Boolean   @default(false)
  image            String?
  username         String    @unique
  displayUsername  String    @unique
  dateOfBirth      DateTime?
  gender           Gender?
  phoneNumber      String?
  address          String?   @db.Text
  state            String?
  lga              String?
  schoolName       String?
  twoFactorEnabled Boolean   @default(false)

  // Admin plugin fields
  role       String?   @default("user")
  banned     Boolean   @default(false)
  banReason  String?   @db.Text
  banExpires DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions  Session[]
  accounts  Account[]
  twoFactor TwoFactor?

  @@index([email])
  @@index([username])
  @@index([displayUsername])
  @@index([role])
  @@index([banned])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?  @db.Text
  userId    String

  // Admin plugin field for impersonation
  impersonatedBy String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([impersonatedBy])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@unique([identifier, value(length: 255)])
  @@index([value(length: 255)])
  @@map("verification")
}

model TwoFactor {
  id          String  @id @default(cuid())
  secret      String? @db.Text
  backupCodes String? @db.Text
  userId      String  @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("twoFactor")
}

model KeyValueStore {
  key       String    @id
  value     String    @db.Text
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([expiresAt])
  @@map("key_value_store")
}

enum Gender {
  MALE
  FEMALE
}
